{"version":3,"sources":["script.js"],"names":["UI","listen","_this","this","controller","document","querySelector","clockDisplay","clockface","inputPause","inputStop","btnPause","bind","btnStop","changeUIStyle","showTimeLeft","max","min","step","name","options","AngleInput","getControllerPosition","timeLeft","angle","e","stopPropagation","console","log","checked","oninput","gradToMinutes","onclick","clickHandler","preventDefault","minutesToGrad","notifyUser","title","n","Notification","body","open","window","location","href","close","timeInSecondsLeft","Math","floor","minutesLeft","secondsLeft","innerText","changeUIState","length","newState","currentTheme","classList","toggle","newTheme","dataset","theme","Application","add","syncTimerDisplay","init","defaultTimer","startTimer","elapsed","Date","resetTimer","startTime","timeout","timerProcessId","pauseTimer","target","requestPermission","result","id","_this2","endTimer","cleanAsyncTimers","then","notificationGranted","now","setInterval","setTimeout","clearInterval","clearTimeout","redrawProcessId","seconds","converted","Pomodoro","Object","assign","undefined","grad"],"mappings":"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","file":"script.js","sourcesContent":["/* eslint no-var: 0 */\n/* eslint prefer-template: 0 */\n/* eslint no-plusplus: 1 */\n/* eslint vars-on-top: 0 */\n/* eslint prefer-const: 0 */\n/* eslint arrow-parens: 0 */\n\n// +-TODO: start Pomodoro on clockface click or Enter press;\n// +-TODO: reset Pomodoro on double click or Delete (Backspace);\n// +TODO: visualize chosen interval by printing its length on the clockface;\n// TODO: visualize movements of the controller handler by adjusting interval length;\n// +TODO: show notification on timer ending;\n// +TODO: prevent starting new pomodoro on repeating clicks on the clockface if we already run;\n// -TODO: hide controller on Pomodoro start and show on reset;\n// +TODO: prevent changing controller position when timer either running or paused;\n// TODO: make controller handler follow countdown timer smoothly;\n// +FIX: multiple timers run on start timer repeating clicks;\n\nvar UI = {\n  listen() {\n    this.controller = document.querySelector('#clockController');\n    this.clockDisplay = document.querySelector('#clockDisplay');\n    this.clockface = document.querySelector('.clock__face');\n    this.inputPause = document.querySelector('#inputPause');\n    this.inputStop = document.querySelector('#inputStop');\n    this.btnPause = document.querySelector('#btnPause');\n    this.btnStop = document.querySelector('#btnStop');\n\n    this.notifyUser = this.notifyUser.bind(this);\n    this.showTimeLeft = this.showTimeLeft.bind(this);\n    this.changeUIState = this.changeUIState.bind(this);\n    this.changeUIStyle = this.changeUIStyle.bind(this);\n\n    this.changeUIStyle();\n    // these are the defaults\n    this.options = {\n      max: 360, // maximum value\n      min: 0, // minimum value\n      step: 6, // [min, min+step, ..., max]\n      name: 'clock-controller', // used for <input name>\n    };\n\n    this.angle = AngleInput(this.controller, this.options);\n    this.angle(this.getControllerPosition()); // set controller position;\n    this.showTimeLeft(this.timeLeft); // set digital display to default pomodoro value;\n\n    this.controller.oninput = e => {\n      e.stopPropagation();\n      console.log('controller input');\n      console.log(`51. stopped=${this.inputStop.checked}`);\n      if (this.inputStop.checked) {\n        this.timeLeft = this.gradToMinutes(this.angle()) * 60;\n        this.showTimeLeft(this.timeLeft);\n      }\n    };\n\n    this.controller.onclick = e => {\n      e.stopPropagation();\n      console.log('controller clicked');\n      console.log(`61. stopped=${this.inputStop.checked}`);\n      if (this.inputStop.checked) {\n        this.timeLeft = this.gradToMinutes(this.angle()) * 60;\n        this.showTimeLeft(this.timeLeft);\n      }\n    };\n\n    this.btnPause.onclick = e => {\n      e.stopPropagation();\n      console.log('Pause clicked');\n      this.clickHandler(e);\n    };\n\n    this.btnStop.onclick = e => {\n      e.stopPropagation();\n      e.preventDefault(); // need this to prevent inputStop toggling on second press on stop btn\n      console.log('Stop clicked');\n      this.clickHandler(e);\n    };\n  },\n\n  getControllerPosition() {\n    return this.minutesToGrad(this.timeLeft);\n  },\n\n  notifyUser(title, body) {\n    var n = new Notification(title, { body });\n    n.onclick = e => {\n      e.preventDefault();\n      window.open(window.location.href, 'Pomodoro');\n    };\n    setTimeout(n.close.bind(n), 5000);\n  },\n\n  showTimeLeft(timeInSecondsLeft) {\n    var minutesLeft = Math.floor(timeInSecondsLeft / 60);\n    var secondsLeft = timeInSecondsLeft - minutesLeft * 60;\n    console.log(\n      `timeLeft=${timeInSecondsLeft}, min=${minutesLeft}, sec=${secondsLeft}`,\n    );\n    this.clockDisplay.innerText =\n      (String(minutesLeft).length !== 2 ? '0' : '') +\n      minutesLeft +\n      ':' +\n      (String(secondsLeft).length !== 2 ? '0' : '') +\n      secondsLeft;\n  },\n\n  changeUIState(newState) {\n    console.log(`105. stopped=${this.inputStop.checked}`);\n    if (newState === 'stopped') {\n      console.log(`in ${newState} state`);\n      this.showTimeLeft(this.timeLeft);\n      this.inputPause.checked = true; // change play/pause button appearance;\n      this.inputStop.checked = true;\n      console.log(`111. stopped=${this.inputStop.checked}`);\n      this.angle(this.getControllerPosition()); // set controller position;\n      this.changeUIStyle(newState);\n    } else if (newState === 'running') {\n      console.log(`in ${newState} state`);\n      this.changeUIStyle(newState);\n      this.inputStop.checked = false;\n    } else if (newState === 'paused') {\n      console.log(`in ${newState} state`);\n      this.changeUIStyle(newState);\n      this.inputStop.checked = false;\n    } else if (newState === 'tick') {\n      console.log(`in ${newState} state`);\n      this.showTimeLeft(this.timeLeft);\n      this.angle(this.getControllerPosition()); // set controller position;\n    }\n  },\n\n  changeUIStyle(newTheme) {\n    var body = document.querySelector('body');\n    var currentTheme = body.dataset.theme;\n    body.classList.toggle(`${currentTheme}`);\n    if (newTheme) {\n      body.classList.add(`--${newTheme}`);\n      body.dataset.theme = `--${newTheme}`;\n    }\n  },\n};\n\nvar Application = {\n  init() {\n    this.clickHandler = this.clickHandler.bind(this);\n    this.syncTimerDisplay = this.syncTimerDisplay.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.endTimer = this.endTimer.bind(this);\n    this.minutesToGrad = this.minutesToGrad.bind(this);\n    this.gradToMinutes = this.gradToMinutes.bind(this);\n    this.defaultTimer = 25; // default pomodoro timeout in minutes;\n    this.timeLeft = this.defaultTimer * 60;\n  },\n\n  syncTimerDisplay(timeout) {\n    var elapsed = Date.now() - this.startTime;\n    this.timeLeft = timeout - Math.floor(elapsed / 1000);\n    if (this.timeLeft >= 0) {\n      this.changeUIState('tick');\n    }\n  },\n\n  clickHandler(e) {\n    if (e.target.id === 'btnPause') {\n      console.log(`timeLeft=${this.timeLeft}`);\n      if (this.timerProcessId) this.pauseTimer();\n      else this.startTimer(this.timeLeft);\n    } else if (e.target.id === 'btnStop') {\n      this.resetTimer();\n    }\n  },\n\n  startTimer(timeout) {\n    if (Notification) {\n      Notification.requestPermission().then(result => {\n        if (result === 'denied') console.log('Notification are not granted');\n        else if (result === 'default')\n          console.log('Notifications are not set to default');\n        else this.notificationGranted = true;\n      });\n    }\n    this.startTime = Date.now();\n    this.redrawProcessId = setInterval(this.syncTimerDisplay, 1000, timeout);\n    this.timerProcessId = setTimeout(this.endTimer, timeout * 1000 + 100);\n    this.changeUIState('running');\n  },\n\n  endTimer() {\n    this.cleanAsyncTimers();\n    if (this.notificationGranted) this.notifyUser('Pomodoro', 'Time ended');\n    else alert('Time ended');\n    this.changeUIState('stopped');\n  },\n\n  pauseTimer() {\n    this.cleanAsyncTimers();\n    this.changeUIStyle('paused');\n  },\n\n  resetTimer() {\n    this.cleanAsyncTimers();\n    this.timeLeft = this.defaultTimer * 60;\n    this.changeUIState('stopped');\n  },\n\n  cleanAsyncTimers() {\n    clearInterval(this.redrawProcessId);\n    clearTimeout(this.timerProcessId);\n    this.timerProcessId = undefined;\n    this.redrawProcessId = undefined;\n  },\n\n  minutesToGrad(seconds) {\n    var result;\n    if (seconds >= 0 && seconds <= 15 * 60) {\n      result = 360 - Math.floor((seconds + 60 * 60) / 10) + 90;\n    } else result = 360 - Math.floor(seconds / 10) + 90;\n    return result;\n  },\n\n  gradToMinutes(grad) {\n    var converted = (360 - grad + 90) / 6;\n    if (converted >= 60 && converted <= 75) converted -= 60;\n    return converted;\n  },\n};\n\nvar Pomodoro = Object.assign({}, UI, Application);\nPomodoro.init();\nPomodoro.listen();\n"],"sourceRoot":"/source/"}