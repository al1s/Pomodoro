{"version":3,"sources":["script.js"],"names":["UI","listen","_this","this","controller","document","querySelector","clockDisplay","clockface","inputPause","inputStop","btnPause","bind","btnStop","controllerPosition","minutesToGrad","timeLeft","notifyUser","showTimeLeft","stopped","max","min","changeUIStyle","step","name","options","AngleInput","angle","e","stopPropagation","console","log","checked","oninput","gradToMinutes","clickHandler","onclick","n","Notification","title","body","window","open","href","preventDefault","setTimeout","minutesLeft","Math","floor","timeInSecondsLeft","secondsLeft","innerText","String","length","changeUIState","newState","currentTheme","dataset","classList","toggle","newTheme","theme","Application","add","init","defaultTimer","startTimer","syncTimerDisplay","resetTimer","elapsed","Date","now","startTime","timeout","timerProcessId","pauseTimer","id","target","requestPermission","result","_this2","endTimer","then","cleanAsyncTimers","notificationGranted","redrawProcessId","setInterval","clearInterval","clearTimeout","seconds","grad","converted","Pomodoro","assign","undefined","Object"],"mappings":"aAgBA,IAAAA,IAGEC,OAHF,WAGW,IAAAC,EAAAC,KADPH,KAAKI,WAAAC,SAAAC,cAAA,oBACPL,KADOM,aAAAF,SACEC,cAAA,iBAAAH,KAAAK,UAAAH,SAAAC,cAAA,gBAIPH,KAAKM,WAAaJ,SAASC,cAAc,eAHzCH,KAAKC,UAALC,SAAkBA,cAAA,cAClBF,KAAKI,SAAAA,SAAeF,cAASC,aAC7BH,KAAKK,QAALH,SAAiBA,cAASC,YAE1BH,KAAKO,WAAYL,KAAAA,WAASC,KAATH,MACjBA,KAAKQ,aAAWN,KAASC,aAATM,KAAuBT,MACvCA,KAAKU,cAAUR,KAASC,cAAcM,KAAAT,MAKtCA,KAAKW,mBAAqBX,KAAKY,cAAcZ,KAAKa,UAHlDb,KAAKc,OAAAA,KAAaR,WAAKQ,QACvBd,KAAKe,QAAAA,KAAeR,UAAKQ,QAEzBf,KAAKW,gBAELX,KAAKgB,SAKHC,IAAK,IAHPC,IAAKC,EACLC,KAAA,EACAC,KAAKC,oBAGHF,KAAAA,MAASG,WAAAvB,KAAAC,WAAAD,KAAAsB,SACTD,KAAAA,MAAMrB,KAAAW,oBAJOX,KAAfe,aAAAf,KAAAa,UAOAb,KAAKwB,WAAQD,QAAW,SAAAE,GACxBA,EAAAC,kBACAC,QAAKZ,IAAAA,oBAKHY,QAAQC,IAAR,WAAuB7B,EAAKQ,UAAUsB,SAHnC5B,EAAAA,UAAW6B,UACZJ,EAAAA,SAAF,GAAA3B,EAAAgC,cAAAhC,EAAAyB,SACAG,EAAAA,aAAY5B,EAAAc,YAIVb,KAAAC,WAAKc,QAAa,SAAAU,GACnB1B,EAAAQ,UAAAsB,UAPHJ,EAAAC,kBAaIC,QAAQC,IAAI,sBAHhBD,QAAK1B,IAAL,WAA0BF,EAAAQ,UAAKsB,SAC7B9B,EAAIc,SAAwB,GAAnBN,EAAUsB,cAAS9B,EAAAyB,SAC1BC,EAAEC,aAAF3B,EAAAc,YAIAb,KAAAQ,SAAKO,QAAa,SAAAU,GACnBA,EAAAC,kBAPHC,QAAAC,IAAA,iBAaE7B,EAAKiC,aAAaP,IADlBE,KAAAA,QAAAM,QAAY,SAAAR,GACZA,EAAAC,kBAHFC,QAAAC,IAAA,gBASE7B,EAAKiC,aAAaP,KAAlBX,WA7DN,SA6DWkB,EAAAA,GACN,IAJDE,EAAA,IAAAC,aAAAC,GAAAC,KAAAA,IAxDKH,EAAAD,QAAA,SAAAR,GA+DPX,EAAAA,iBACEwB,OAAQC,KAAIJ,OAAAA,SAAJK,KAA0BH,aAEhCZ,WAAEgB,EAAAA,MAAFhC,KAAAyB,GAAA,MAGFQ,aAvEJ,SAuEeR,GArEN,IAAAS,EAAAC,KAAAC,MAAAC,EAAA,IAwEP/B,EAxEO+B,EAAA,GAwEMA,EACXnB,QAAIgB,IAAJ,YACII,EADJ,SACsCJ,EADtC,SACAI,GAIA/C,KAAKI,aAAa4C,WA9Eb,IAAAC,OAAAN,GAAAO,OAAA,IAAA,IAsFPC,EACExB,KAC4B,IAA5BsB,OAAIG,GAAaF,OAAW,IAAA,IAC1BH,GAGAI,cA9FN,SA8FMC,GACAzB,QAAKR,IAAL,WAAmBiC,KAAAA,UAAnBvB,SACSuB,YANXA,GAOEpD,KAAKmB,aAALnB,KAAmBoD,UACnBpD,KAAKO,WAAUsB,SAAU,EAFpB7B,KAGAO,UAAI6C,SAAa,EACtBpD,KAAKmB,MAAAA,KAAAA,oBACLnB,KAAKO,cAAUsB,IACO,YAAbuB,GACTpD,KAAKe,cAAaqC,GAClBpD,KAAKwB,UAAMK,SAAKlB,GACjB,WAAAyC,GAvGIpD,KAAAmB,cAAAiC,GA0GPjC,KAAAA,UA1GOU,SAAA,GA2Ge1B,SAATD,IACXF,KAAIqD,aAAehB,KAAKiB,UACxBjB,KAAKkB,MAAAA,KAAUC,sBAIdrC,cAnHL,SAmHKsC,GACF,IAAApB,EAAAnC,SAAAC,cAAA,QAlHHkD,EAAAhB,EAAAiB,QAAAI,MA6GIrB,EAAKkB,UAAUC,OAAf,GAAyBH,GAQzBM,IAActB,EAAAkB,UAAAK,IAAA,KACTH,GACLpB,EAAKL,QAAAA,MAAL,KAAyBA,KAKzB2B,aACAE,KADKjD,WAELZ,KAAK8D,aAAe9D,KAAIgC,aAAAvB,KAAAT,MACxBA,KAAKa,iBAAgBiD,KAAAA,iBAArBrD,KAAAT,MAVcA,KAAA+D,WAAA/D,KAAA+D,WAAAtD,KAAAT,MAahBgE,KAAAA,WAbgBhE,KAAAiE,WAAAxD,KAAAT,MAcdA,KAAIkE,SAAUC,KAAKC,SAAQ3D,KAAK4D,MAChCrE,KAAKa,cAAWyD,KAAU1B,cAAWsB,KAAAA,MACrClE,KAAI+B,cAAiB/B,KAAG+B,cAAAtB,KAAAT,MACtBA,KAAA8D,aAAA,GACD9D,KAAAa,SAAA,GAAAb,KAAA8D,cAIDE,iBAfKpD,SAeD0D,GACF3C,IAAAA,EAAAwC,KAAAC,MAAApE,KAAwBqE,UACxBrE,KAAAa,SAAS0D,EAAT3B,KAAyBC,MAAK2B,EAA9B,KAFFxE,KAIOa,UAAa4D,GAClBzE,KAAKiE,cAAL,SAIgBjC,aAxBbpB,SAwBaa,GATE,aAAhBA,EAAEiD,OAAOD,IAUb9C,QAAIQ,IAAJ,YAAkBnC,KAAAa,UAChBsB,KAAAA,eAAawC,KAAbH,aACExE,KAAI4E,WAAW5E,KAAfa,WADF,YAAAY,EAAAiD,OAAAD,IAMDzE,KAAAiE,cAIDF,WApCKnD,SAoCAuC,GAAL,IAAA0B,EAAA7E,KA3CcmC,cA8ChB2C,aA9CgBH,oBA8CLI,KAAA,SAAAH,GACJI,WAAAA,EAALrD,QAAAC,IAAA,gCACSqD,YAAAA,EAEJ9B,QAAAA,IAAL,wCAlDc0B,EAAAI,qBAAA,IAuDdjF,KAAKmB,UAAAA,KAAciD,MAvDLpE,KAAAkF,gBAAAC,YAAAnF,KAAAgE,iBAAA,IAAAM,GA0DhBL,KAAAA,eA1DgBvB,WA0DH1C,KAAA8E,SAAA,IAAAR,EAAA,KACXtE,KAAKgF,cAAAA,YAGNF,SAvDMlE,WAyDPoE,KAAAA,mBACEI,KAAAA,oBAAmBF,KAAnBpE,WAAA,WAAA,cACAuE,MAAAA,cACArF,KAAKuE,cAAL,YAIF3D,WAhEOA,WAiELZ,KAAI4E,mBACJ5E,KAAIsF,cAAA,WAGJrB,WArEKrD,WAPSZ,KAAAgF,mBA+EhBjD,KAAAA,SAAcwD,GA/EEvF,KAAA8D,aAgFd9D,KAAIwF,cAAa,YAGlBR,iBA5EMpE,WAPTwE,cAAApF,KAAAkF,iBAkEIG,aAAarF,KAAKuE,gBAoBlBkB,KAAAA,oBAAkBC,EACtBD,KAAS5B,qBAAT8B,GAhBE/E,cAhEOA,SAgEO0E,GAKZ,OAHIA,GAAW,GAAKA,GAAW,IACpB,IAAM1C,KAAKC,OAAOyC,EAAU,MAAW,IAAM,GACxC,IAAM1C,KAAKC,MAAMyC,EAAU,IAAM,IAInDvD,cAxEOnB,SAwEO2E,GACZ,IAAIC,GAAa,IAAMD,EAAO,IAAM,EAEpC,OADIC,GAAa,IAAMA,GAAa,KAAIA,GAAa,IAC9CA,IAIPC,SAAWG,OAAOF,UAAW7F,GAAI8D,aACrC8B,SAAS5B,OACT4B,SAAS3F","file":"script.js","sourcesContent":["/* eslint no-var: 0 */\n/* eslint prefer-template: 0 */\n/* eslint no-plusplus: 1 */\n/* eslint vars-on-top: 0 */\n/* eslint prefer-const: 0 */\n/* eslint arrow-parens: 0 */\n\n// +-TODO: start Pomodoro on clockface click or Enter press;\n// +-TODO: reset Pomodoro on double click or Delete (Backspace);\n// +TODO: visualize chosen interval by printing its length on the clockface;\n// TODO: visualize movements of the controller handler by adjusting interval length;\n// +TODO: show notification on timer ending;\n// +TODO: prevent starting new pomodoro on repeating clicks on the clockface if we already run;\n// -TODO: hide controller on Pomodoro start and show on reset;\n// +TODO: prevent changing controller position when timer either running or paused;\n// TODO: make controller handler follow countdown timer smoothly;\n// +FIX: multiple timers run on start timer repeating clicks;\n\nvar UI = {\n  listen() {\n    this.controller = document.querySelector('#clockController');\n    this.clockDisplay = document.querySelector('#clockDisplay');\n    this.clockface = document.querySelector('.clock__face');\n    this.inputPause = document.querySelector('#inputPause');\n    this.inputStop = document.querySelector('#inputStop');\n    this.btnPause = document.querySelector('#btnPause');\n    this.btnStop = document.querySelector('#btnStop');\n\n    this.notifyUser = this.notifyUser.bind(this);\n    this.showTimeLeft = this.showTimeLeft.bind(this);\n    this.changeUIStyle = this.changeUIStyle.bind(this);\n    this.controllerPosition = this.minutesToGrad(this.timeLeft);\n    this.paused = this.inputPause.checked;\n    this.stopped = this.inputStop.checked;\n\n    this.changeUIStyle();\n    // these are the defaults\n    this.options = {\n      max: 360, // maximum value\n      min: 0, // minimum value\n      step: 6, // [min, min+step, ..., max]\n      name: 'clock-controller', // used for <input name>\n    };\n\n    this.angle = AngleInput(this.controller, this.options);\n    this.angle(this.controllerPosition); // set controller position;\n    this.showTimeLeft(this.timeLeft); // set digital display to default pomodoro value;\n\n    this.controller.oninput = e => {\n      e.stopPropagation();\n      console.log('controller input');\n      console.log(`stopped=${this.inputStop.checked}`);\n      if (this.inputStop.checked) {\n        this.timeLeft = this.gradToMinutes(this.angle()) * 60;\n        this.showTimeLeft(this.timeLeft);\n      }\n    };\n\n    this.controller.onclick = e => {\n      if (this.inputStop.checked) {\n        e.stopPropagation();\n        console.log('controller clicked');\n        console.log(`stopped=${this.inputStop.checked}`);\n        this.timeLeft = this.gradToMinutes(this.angle()) * 60;\n        this.showTimeLeft(this.timeLeft);\n      }\n    };\n\n    this.btnPause.onclick = e => {\n      e.stopPropagation();\n      console.log('Pause clicked');\n      this.clickHandler(e);\n    };\n\n    this.btnStop.onclick = e => {\n      e.stopPropagation();\n      console.log('Stop clicked');\n      this.clickHandler(e);\n    };\n  },\n\n  notifyUser(title, body) {\n    var n = new Notification(title, { body });\n    n.onclick = e => {\n      e.preventDefault();\n      window.open(window.location.href, 'Pomodoro');\n    };\n    setTimeout(n.close.bind(n), 5000);\n  },\n\n  showTimeLeft(timeInSecondsLeft) {\n    var minutesLeft = Math.floor(timeInSecondsLeft / 60);\n    var secondsLeft = timeInSecondsLeft - minutesLeft * 60;\n    console.log(\n      `timeLeft=${timeInSecondsLeft}, min=${minutesLeft}, sec=${secondsLeft}`,\n    );\n    this.clockDisplay.innerText =\n      (String(minutesLeft).length !== 2 ? '0' : '') +\n      minutesLeft +\n      ':' +\n      (String(secondsLeft).length !== 2 ? '0' : '') +\n      secondsLeft;\n  },\n\n  changeUIState(newState) {\n    console.log(`stopped=${this.inputStop.checked}`);\n    if (newState === 'stopped') {\n      this.showTimeLeft(this.timeLeft);\n      this.inputPause.checked = true; // change play/pause button appearance;\n      this.inputStop.checked = true;\n      this.angle(this.controllerPosition); // set controller position;\n      this.changeUIStyle(newState);\n    } else if (newState === 'running') {\n      this.changeUIStyle(newState);\n      this.inputStop.checked = false;\n    } else if (newState === 'paused') {\n      this.changeUIStyle(newState);\n      this.inputStop.checked = false;\n    } else if (newState === 'tick') {\n      this.showTimeLeft(this.timeLeft);\n      this.angle(this.controllerPosition); // set controller position;\n    }\n  },\n\n  changeUIStyle(newTheme) {\n    var body = document.querySelector('body');\n    var currentTheme = body.dataset.theme;\n    body.classList.toggle(`${currentTheme}`);\n    if (newTheme) {\n      body.classList.add(`--${newTheme}`);\n      body.dataset.theme = `--${newTheme}`;\n    }\n  },\n};\n\nvar Application = {\n  init() {\n    this.clickHandler = this.clickHandler.bind(this);\n    this.syncTimerDisplay = this.syncTimerDisplay.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.endTimer = this.endTimer.bind(this);\n    this.minutesToGrad = this.minutesToGrad.bind(this);\n    this.gradToMinutes = this.gradToMinutes.bind(this);\n    this.defaultTimer = 25; // default pomodoro timeout in minutes;\n    this.timeLeft = this.defaultTimer * 60;\n  },\n\n  syncTimerDisplay(timeout) {\n    var elapsed = Date.now() - this.startTime;\n    this.timeLeft = timeout - Math.floor(elapsed / 1000);\n    if (this.timeLeft >= 0) {\n      this.changeUIState('tick');\n    }\n  },\n\n  clickHandler(e) {\n    if (e.target.id === 'btnPause') {\n      console.log(`timeLeft=${this.timeLeft}`);\n      if (this.timerProcessId) this.pauseTimer();\n      else this.startTimer(this.timeLeft);\n    } else if (e.target.id === 'btnStop') {\n      this.resetTimer();\n    }\n  },\n\n  startTimer(timeout) {\n    if (Notification) {\n      Notification.requestPermission().then(result => {\n        if (result === 'denied') console.log('Notification are not granted');\n        else if (result === 'default')\n          console.log('Notifications are not set to default');\n        else this.notificationGranted = true;\n      });\n    }\n    this.startTime = Date.now();\n    this.redrawProcessId = setInterval(this.syncTimerDisplay, 1000, timeout);\n    this.timerProcessId = setTimeout(this.endTimer, timeout * 1000 + 100);\n    this.changeUIState('running');\n  },\n\n  endTimer() {\n    this.cleanAsyncTimers();\n    if (this.notificationGranted) this.notifyUser('Pomodoro', 'Time ended');\n    else alert('Time ended');\n    this.changeUIState('stopped');\n  },\n\n  pauseTimer() {\n    this.cleanAsyncTimers();\n    this.changeUIStyle('paused');\n  },\n\n  resetTimer() {\n    this.cleanAsyncTimers();\n    this.timeLeft = this.defaultTimer * 60;\n    this.changeUIState('stopped');\n  },\n\n  cleanAsyncTimers() {\n    clearInterval(this.redrawProcessId);\n    clearTimeout(this.timerProcessId);\n    this.timerProcessId = undefined;\n    this.redrawProcessId = undefined;\n  },\n\n  minutesToGrad(seconds) {\n    var result;\n    if (seconds >= 0 && seconds <= 15 * 60) {\n      result = 360 - Math.floor((seconds + 60 * 60) / 10) + 90;\n    } else result = 360 - Math.floor(seconds / 10) + 90;\n    return result;\n  },\n\n  gradToMinutes(grad) {\n    var converted = (360 - grad + 90) / 6;\n    if (converted >= 60 && converted <= 75) converted -= 60;\n    return converted;\n  },\n};\n\nvar Pomodoro = Object.assign({}, UI, Application);\nPomodoro.init();\nPomodoro.listen();\n"],"sourceRoot":"/source/"}